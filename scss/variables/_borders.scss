@use 'sass:map';
@use '../mixins/mixins' as m;
@use 'colors' as c;
@use 'grid' as g;

// ==========================================================================
// Axel Framework - Borders
// Description: Utility classes for border properties in the Axel CSS framework.
// Supports border-width, border-style, border-color, and border-radius with
// responsive variants. Integrates with theme colors for border-color.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Border Configuration
// Defines border properties for utility classes.
// Example usage: .border-2 { border-width: 2px; }
//                .border-primary { border-color: var(--primary); }
// --------------------------------------------------------------------------
$border-widths: (
  "0": 0,
  "1": 1px,
  "2": 2px,
  "4": 4px,
  "8": 8px
);

$border-styles: (
  "solid": solid,
  "dashed": dashed,
  "dotted": dotted,
  "none": none
);

$border-radii: (
  "none": 0,
  "sm": 4px,
  "md": 8px,
  "lg": 16px,
  "full": 9999px
);


// --------------------------------------------------------------------------
// Border Utilities
// Generates border utility classes with responsive variants.
// --------------------------------------------------------------------------

// Border Width
@include m.generate-utility("border-width", "border", $border-widths);
@each $bp-size, $bp-value in g.$breakpoints {
  @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      @each $key, $value in $border-widths {
        .#{$bp-size}\:border-#{$key} {
          border-width: $value;
        }
      }
    }
  }
}

// Border Style
@include m.generate-utility("border-style", "border", $border-styles);
@each $bp-size, $bp-value in g.$breakpoints {
  @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      @each $key, $value in $border-styles {
        .#{$bp-size}\:border-#{$key} {
          border-style: $value;
        }
      }
    }
  }
}

// Border Color
@each $color in map.keys(map.get(c.$themes, light)) {
  .border-#{$color} {
    border-color: var(--#{$color});
  }
  @each $bp-size, $bp-value in g.$breakpoints {
    @if $bp-size != 'xs' {
      @include m.media($bp-size, g.$breakpoints) {
        .#{$bp-size}\:border-#{$color} {
          border-color: var(--#{$color});
        }
      }
    }
  }
}

// Border Radius
@include m.generate-utility("border-radius", "rounded", $border-radii);
@each $bp-size, $bp-value in g.$breakpoints {
  @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      @each $key, $value in $border-radii {
        .#{$bp-size}\:rounded-#{$key} {
          border-radius: $value;
        }
      }
    }
  }
}