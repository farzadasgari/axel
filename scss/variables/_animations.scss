@use 'sass:map';
@use 'sass:math';
@use 'spacing' as s;
@use 'transitions' as t;
@use 'typography' as ty;
@use 'colors' as c;
@use 'grid' as g;
@use '../mixins/mixins' as m;

// ==========================================================================
// Axel Framework - Animations
// Description: Animation keyframes and utility classes for the Axel CSS framework.
// Provides fade, slide, scale, and spin animations with customizable durations and delays.
// Respects prefers-reduced-motion for accessibility.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Animation Configuration
// Defines keyframes, durations, delays, and timing functions.
// Example usage: .animate-fade-in { animation: fade-in 0.5s ease-out; }
// --------------------------------------------------------------------------
$animation-durations: (
  "100ms": 0.1s,
  "200ms": 0.2s,
  "300ms": 0.3s,
  "500ms": 0.5s,
  "700ms": 0.7s,
  "1000ms": 1s
);

$animation-delays: (
  "0ms": 0s,
  "100ms": 0.1s,
  "200ms": 0.2s,
  "300ms": 0.3s,
  "500ms": 0.5s
);

$animation-timing-functions: (
  "ease": ease,
  "ease-in": ease-in,
  "ease-out": ease-out,
  "ease-in-out": ease-in-out,
  "linear": linear
);


// --------------------------------------------------------------------------
// Keyframes
// Core animation definitions for reuse across utilities.
// --------------------------------------------------------------------------
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slide-up {
  from {
    transform: 0 translateY(map.get(s.$spacings, 4));
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slide-down {
  from {
    transform: translateY(calc(-1 * map.get(s.$spacings, 4)));
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes scale-in {
  from {
    transform: scale(0.8);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


// --------------------------------------------------------------------------
// Animation Utilities
// Generates animation classes with customizable properties.
// Example usage: .animate-fade-in-500ms { animation: fade-in 0.5s; }
// --------------------------------------------------------------------------
$animations: (
  "fade-in": (
    name: fade-in,
    duration: map.get($animation-durations, "500ms"),
    timing: map.get($animation-timing-functions, "ease-out")
  ),
  "slide-up": (
    name: slide-up,
    duration: map.get($animation-durations, "500ms"),
    timing: map.get($animation-timing-functions, "ease-out")
  ),
  "slide-down": (
    name: slide-down,
    duration: map.get($animation-durations, "500ms"),
    timing: map.get($animation-timing-functions, "ease-out")
  ),
  "scale-in": (
    name: scale-in,
    duration: map.get($animation-durations, "300ms"),
    timing: map.get($animation-timing-functions, "ease-out")
  ),
  "spin": (
    name: spin,
    duration: map.get($animation-durations, "1000ms"),
    timing: map.get($animation-timing-functions, "linear")
  )
);

@each $name, $props in $animations {
  .animate-#{$name} {
    animation: map.get($props, name) map.get($props, duration) map.get($props, timing);
    animation-fill-mode: both;

    // Accessibility: Disable for prefers-reduced-motion
    @media (prefers-reduced-motion: reduce) {
      animation: none !important;
    }
  }

  // Duration variants
  @each $duration-name, $duration in $animation-durations {
    .animate-#{$name}-#{$duration-name} {
      animation: map.get($props, name) $duration map.get($props, timing);
      animation-fill-mode: both;

      @media (prefers-reduced-motion: reduce) {
        animation: none !important;
      }
    }
  }

  // Delay variants
  @each $delay-name, $delay in $animation-delays {
    .animate-#{$name}-delay-#{$delay-name} {
      animation: map.get($props, name) map.get($props, duration) map.get($props, timing);
      animation-delay: $delay;
      animation-fill-mode: both;

      @media (prefers-reduced-motion: reduce) {
        animation: none !important;
      }
    }
  }

  // Responsive variants
  @each $bp-size, $value in g.$breakpoints {
    @if $bp-size != 'xs' {
      @include m.media($bp-size, g.$breakpoints) {
        .animate-#{$name}-#{$bp-size} {
          animation: map.get($props, name) map.get($props, duration) map.get($props, timing);
          animation-fill-mode: both;

          @media (prefers-reduced-motion: reduce) {
            animation: none !important;
          }
        }
      }
    }
  }
}