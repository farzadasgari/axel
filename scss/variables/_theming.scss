@use 'sass:map';
@use 'sass:color';
@use '../mixins/mixins' as m;
@use 'colors' as c;

// ==========================================================================
// Axel Framework - Theming
// Description: Applies theme-specific CSS custom properties for light, dark,
// and high-contrast themes. Supports prefers-color-scheme and data-theme attributes.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Theme Application
// Applies CSS custom properties to :root and [data-theme] selectors.
// Supports prefers-color-scheme for automatic theme switching.
// Example usage: [data-theme="dark"] { --primary: #CE93D8; }
// --------------------------------------------------------------------------
:root {
  @each $theme, $colors in c.$themes {
    @if $theme == 'light' {
      @include m.theme(light, c.$themes);
      @each $key, $value in $colors {
        --#{$key}-rgb: #{color.channel($value, 'red', $space: rgb)}, #{color.channel($value, 'green', $space: rgb)}, #{color.channel($value, 'blue', $space: rgb)};
      }
    }
    @media (prefers-color-scheme: dark) {
      @include m.theme(dark, c.$themes);
      @each $key, $value in map.get(c.$themes, dark) {
        --#{$key}-rgb: #{color.channel($value, 'red', $space: rgb)}, #{color.channel($value, 'green', $space: rgb)}, #{color.channel($value, 'blue', $space: rgb)};
      }
    }
  }
}

[data-theme="light"] {
  @include m.theme(light, c.$themes);
  @each $key, $value in map.get(c.$themes, light) {
    --#{$key}-rgb: #{color.channel($value, 'red', $space: rgb)}, #{color.channel($value, 'green', $space: rgb)}, #{color.channel($value, 'blue', $space: rgb)};
  }
}

[data-theme="dark"] {
  @include m.theme(dark, c.$themes);
  @each $key, $value in map.get(c.$themes, dark) {
    --#{$key}-rgb: #{color.channel($value, 'red', $space: rgb)}, #{color.channel($value, 'green', $space: rgb)}, #{color.channel($value, 'blue', $space: rgb)};
  }
}

[data-theme="high-contrast"] {
  @include m.theme(high-contrast, c.$themes);
  @each $key, $value in map.get(c.$themes, high-contrast) {
    --#{$key}-rgb: #{color.channel($value, 'red', $space: rgb)}, #{color.channel($value, 'green', $space: rgb)}, #{color.channel($value, 'blue', $space: rgb)};
  }
}