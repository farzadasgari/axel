@use 'sass:map';
@use 'colors' as c;

// ==========================================================================
// Axel Framework - Typography
// Description: Typography tokens for the Axel CSS framework, providing scalable
// font sizes, modern font families, line heights, and weights. Supports fluid
// typography with clamp() for responsive design and WCAG 2.1 accessibility.
// Author: Farzad Asgari
// Version: 1.0.0
// ==========================================================================


// --------------------------------------------------------------------------
// Base Font Size
// Defines the root font size for relative units (rem). Default is 16px to align
// with browser standards. All font sizes are calculated relative to this base.
// Example: 1rem = 16px, 0.75rem = 12px.
// --------------------------------------------------------------------------
$base-font-size: 1rem; // 16px at default browser settings


// --------------------------------------------------------------------------
// Font Sizes
// A modular scale of font sizes for body text, headings, and small text.
// Uses rem units for accessibility and consistency. Named keys (xxs, base, xl)
// allow easy iteration in mixins and utilities.
// Example usage: font-size: map.get($font-sizes, base);
// --------------------------------------------------------------------------
$font-sizes: (
        xxs: 0.5 * $base-font-size, // 8px, for fine print
        xs: 0.625 * $base-font-size, // 10px, for captions
        sm: 0.75 * $base-font-size, // 12px, for small text
        md: 0.875 * $base-font-size, // 14px, for secondary text
        base: $base-font-size, // 16px, for body text
        lg: 1.125 * $base-font-size, // 18px, for subheadings
        xl: 1.25 * $base-font-size, // 20px, for headings
        xxl: 1.5 * $base-font-size, // 24px, for larger headings
        xxxl: 2 * $base-font-size, // 32px, for main headings
        xxxxl: 2.5 * $base-font-size // 40px, for hero text
);


// --------------------------------------------------------------------------
// Fluid Font Sizes
// Defines min/max font sizes for fluid typography using clamp().
// Scales smoothly between breakpoints for responsive headings.
// Example usage: font-size: clamp(map.get(map.get($fluid-font-sizes, h1), min), ...);
// --------------------------------------------------------------------------
$fluid-font-sizes: (
        h1: (min: 1.5rem, max: 3rem, viewport: 4vw), // Hero headings
        h2: (min: 1.25rem, max: 2.5rem, viewport: 3vw), // Section headings
        h3: (min: 1.125rem, max: 2rem, viewport: 2.5vw), // Subheadings
        h4: (min: 1rem, max: 1.5rem, viewport: 2vw), // Minor headings
        h5: (min: 0.875rem, max: 1.25rem, viewport: 1.5vw), // Small headings
        h6: (min: 0.75rem, max: 1rem, viewport: 1vw) // Tiny headings
);


// --------------------------------------------------------------------------
// Font Families
// Modern, accessible font stacks for base, heading, and monospace text.
// Includes system fonts for performance and fallbacks for compatibility.
// Example usage: font-family: map.get($font-families, base);
// --------------------------------------------------------------------------
@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Oxygen:wght@300;400;700&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');
$font-families: (
        base: ('Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif),
        heading: ('Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif),
        monospace: ('Fira Code', 'SFMono-Regular', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace)
);


// --------------------------------------------------------------------------
// Font Weights
// A range of font weights for hierarchy and emphasis. Matches common weights
// supported by modern fonts like Inter and Poppins.
// Example usage: font-weight: map.get($font-weights, regular);
// --------------------------------------------------------------------------
$font-weights: (
        light: 300, // Light text
        regular: 400, // Standard body text
        medium: 500, // Slightly bolder for emphasis
        semibold: 600, // Subheadings or strong emphasis
        bold: 700, // Headings or critical elements
        extrabold: 800 // Hero text or maximum emphasis
);


// --------------------------------------------------------------------------
// Line Heights
// Line height options for readability and hierarchy. Unitless values ensure
// consistency across font sizes. Supports tight, normal, and loose spacing.
// Example usage: line-height: map.get($line-heights, normal);
// --------------------------------------------------------------------------
$line-heights: (
        tight: 1.2, // For dense text (e.g., headings)
        normal: 1.5, // For body text (WCAG-compliant for readability)
        loose: 1.8 // For spacious text (e.g., quotes, captions)
);


// --------------------------------------------------------------------------
// Letter Spacing
// Adjustments for tracking (letter spacing) to enhance typography.
// Uses rem for consistency. Positive for headings, negative for dense text.
// Example usage: letter-spacing: map.get($letter-spacings, heading);
// --------------------------------------------------------------------------
$letter-spacings: (
        tight: -0.02rem, // Slightly condensed for small text
        normal: 0, // Default, no adjustment
        heading: 0.02rem, // Slightly expanded for headings
        loose: 0.05rem // Spacious for decorative text
);


// --------------------------------------------------------------------------
// Text Transforms
// Common text transform options for styling text case.
// Example usage: text-transform: map.get($text-transforms, uppercase);
// --------------------------------------------------------------------------
$text-transforms: (
        none: none, // No transformation
        uppercase: uppercase, // All caps for emphasis
        lowercase: lowercase, // All lowercase for style
        capitalize: capitalize // Capitalize first letter
);


// --------------------------------------------------------------------------
// Accessibility
// Typography tokens for accessibility, ensuring WCAG 2.1 compliance.
// Minimum font size for readability and text color integration with colors.scss.
// Example usage: color: map.get(c.$colors, text);
// --------------------------------------------------------------------------
$min-readable-font-size: map.get($font-sizes, sm); // 12px minimum for WCAG
$default-text-color: map.get(c.$colors, text); // Default text color
$default-heading-color: map.get(c.$colors, dark); // Darker for headings
$high-contrast-text-color: map.get(c.$high-contrast-colors, dark); // For high-contrast mode


// Apply default typography to :root for global consistency
:root {
  font-size: $base-font-size;
  font-family: map.get($font-families, base);
  line-height: map.get($line-heights, normal);
  color: $default-text-color;
}


// --------------------------------------------------------------------------
// Responsive Typography Breakpoints
// Optional breakpoints for adjusting typography at specific screen sizes.
// Integrates with $breakpoints from _grid.scss (to be defined later).
// Example usage in mixins: @include media(md) { font-size: map.get($font-sizes, lg); }
// --------------------------------------------------------------------------
$typography-breakpoints: (
        sm: map.get($font-sizes, sm), // Smaller text for small screens
        md: map.get($font-sizes, base), // Default for medium screens
        lg: map.get($font-sizes, lg) // Larger text for large screens
);