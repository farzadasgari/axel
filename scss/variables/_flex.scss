@use 'sass:map';
@use 'sass:math';
@use 'spacing' as s;
@use '../mixins/mixins' as m;
@use 'grid' as g;

// ==========================================================================
// Axel Framework - Flexbox
// Description: General-purpose Flexbox utilities for the Axel CSS framework.
// Provides classes for display, direction, wrapping, alignment, and sizing.
// Integrates with spacing and grid for consistency and WCAG 2.1 accessibility.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Flexbox Display
// Classes for enabling Flexbox and inline-flex displays.
// Example usage: .flex-d { display: flex; }
// --------------------------------------------------------------------------
.flex-d {
  display: flex;
}

.flex-d-inline {
  display: inline-flex;
}


// --------------------------------------------------------------------------
// Flex Direction
// Classes for setting flex-direction, with responsive variants.
// Example usage: .flex-row-md { flex-direction: row; }
// --------------------------------------------------------------------------
$flex-directions: (
  row: row,
  row-reverse: row-reverse,
  column: column,
  column-reverse: column-reverse
);

@each $key, $value in $flex-directions {
  .flex-#{$key} {
    flex-direction: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-#{$size}-#{$key} {
          flex-direction: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Flex Wrap
// Classes for controlling flex wrapping, with responsive variants.
// Example usage: .flex-wrap { flex-wrap: wrap; }
// --------------------------------------------------------------------------
$flex-wraps: (
  wrap: wrap,
  nowrap: nowrap,
  wrap-reverse: wrap-reverse
);

@each $key, $value in $flex-wraps {
  .flex-#{$key} {
    flex-wrap: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-#{$size}-#{$key} {
          flex-wrap: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Justify Content
// Classes for justify-content, using shared mixin from _mixins.scss.
// Example usage: .flex-justify-center { justify-content: center; }
// --------------------------------------------------------------------------
$justify-values: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly
);

@each $key, $value in $justify-values {
  .flex-justify-#{$key} {
    @include m.justify-content($value);
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-justify-#{$size}-#{$key} {
          @include m.justify-content($value);
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Align Items
// Classes for align-items, using shared mixin from _mixins.scss.
// Example usage: .flex-align-center { align-items: center; }
// --------------------------------------------------------------------------
$align-items-values: (
  start: flex-start,
  end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch
);

@each $key, $value in $align-items-values {
  .flex-align-#{$key} {
    @include m.align-items($value);
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-align-#{$size}-#{$key} {
          @include m.align-items($value);
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Align Content
// Classes for align-content in multi-line flex containers.
// Example usage: .flex-align-content-between { align-content: space-between; }
// --------------------------------------------------------------------------
$align-content-values: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly,
  stretch: stretch
);

@each $key, $value in $align-content-values {
  .flex-align-content-#{$key} {
    align-content: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-align-content-#{$size}-#{$key} {
          align-content: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Align Self
// Classes for per-item alignment in flex containers.
// Example usage: .flex-align-self-start { align-self: flex-start; }
// --------------------------------------------------------------------------
$align-self-values: (
  auto: auto,
  start: flex-start,
  end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch
);

@each $key, $value in $align-self-values {
  .flex-align-self-#{$key} {
    align-self: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-align-self-#{$size}-#{$key} {
          align-self: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Flex Grow and Shrink
// Classes for controlling flex-grow and flex-shrink.
// Example usage: .flex-grow-1 { flex-grow: 1; }
// --------------------------------------------------------------------------
$flex-grow-shrink: (0, 1, 2);

@each $value in $flex-grow-shrink {
  .flex-grow-#{$value} {
    flex-grow: $value;
  }

  .flex-shrink-#{$value} {
    flex-shrink: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-grow-#{$size}-#{$value} {
          flex-grow: $value;
        }
        .flex-shrink-#{$size}-#{$value} {
          flex-shrink: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Flex Basis
// Classes for setting flex-basis.
// Example usage: .flex-basis-auto { flex-basis: auto; }
// --------------------------------------------------------------------------
$flex-basis-values: (
  auto: auto,
  0: 0
);

@each $key, $value in $flex-basis-values {
  .flex-basis-#{$key} {
    flex-basis: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-basis-#{$size}-#{$key} {
          flex-basis: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Order
// Classes for reordering flex items.
// Example usage: .flex-order-1 { order: 1; }
// --------------------------------------------------------------------------
$flex-orders: (-1, 0, 1, 2, 3);

@each $value in $flex-orders {
  .flex-order-#{$value} {
    order: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-order-#{$size}-#{$value} {
          order: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Gap
// Classes for flex gap, using spacing tokens from _spacing.scss.
// Example usage: .flex-gap-2 { gap: 0.5rem; }
// --------------------------------------------------------------------------
@each $key, $value in s.$spacings {
  .flex-gap-#{$key} {
    gap: $value;
  }

  @each $size, $breakpoint in g.$breakpoints {
    @if $size != 'xs' {
      @include m.media($size, g.$breakpoints) {
        .flex-gap-#{$size}-#{$key} {
          gap: $value;
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Accessibility
// Ensures flex layouts support WCAG 2.1 readability and usability.
// Uses spacing tokens for touch targets and logical order for screen readers.
// Example usage: gap: s.$min-spacing-interactive;
// --------------------------------------------------------------------------
$min-flex-touch-target: s.$min-touch-target-size; // 44px for interactive elements
$default-flex-gap: map.get(s.$spacings, 3); // 16px default gap