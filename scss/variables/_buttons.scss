@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use 'colors' as c;
@use 'typography' as t;
@use 'spacing' as s;
@use 'grid' as g;
@use 'flex' as f;
@use '../mixins/mixins' as m;
@use 'contrast';

// ==========================================================================
// Axel Framework - Buttons
// Description: Comprehensive button styles with multiple variants, sizes,
// states, and groups. Supports light/dark/high-contrast themes and WCAG 2.1
// accessibility.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Button Variables
// Core configuration for button styles, transitions, and accessibility.
// --------------------------------------------------------------------------
$button-transition: all 0.2s ease-in-out;
$button-outline-width: 2px;
$button-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
$button-neumorphic-shadow: 4px 4px 8px rgba(0, 0, 0, 0.1), -4px -4px 8px rgba(255, 255, 255, 0.5);
$button-min-touch-target: s.$min-touch-target-size; // 44px


// --------------------------------------------------------------------------
// Button Sizes
// Defines padding, font-size, and border-radius for button sizes.
// --------------------------------------------------------------------------
$button-sizes: (
  xs: (
    padding: map.get(s.$spacings, 1) map.get(s.$spacings, 2),
    font-size: map.get(t.$font-sizes, xs),
    border-radius: 0.25rem,
    min-height: $button-min-touch-target
  ),
  sm: (
    padding: map.get(s.$spacings, 2) map.get(s.$spacings, 3),
    font-size: map.get(t.$font-sizes, sm),
    border-radius: 0.375rem,
    min-height: $button-min-touch-target
  ),
  md: (
    padding: map.get(s.$spacings, 3) map.get(s.$spacings, 4),
    font-size: map.get(t.$font-sizes, base),
    border-radius: 0.5rem,
    min-height: $button-min-touch-target
  ),
  lg: (
    padding: map.get(s.$spacings, 4) map.get(s.$spacings, 5),
    font-size: map.get(t.$font-sizes, lg),
    border-radius: 0.625rem,
    min-height: 48px
  ),
  xl: (
    padding: map.get(s.$spacings, 5) map.get(s.$spacings, 6),
    font-size: map.get(t.$font-sizes, xl),
    border-radius: 0.75rem,
    min-height: 52px
  )
);


// --------------------------------------------------------------------------
// Base Button Styles
// Core styles applied to all buttons for consistency and accessibility.
// --------------------------------------------------------------------------
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-family: map.get(t.$font-families, heading);
  font-weight: map.get(t.$font-weights, medium);
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  border: 0;
  outline: none;
  transition: $button-transition;
  box-sizing: border-box;
  min-height: map.get(map.get($button-sizes, md), min-height);
  padding: map.get(map.get($button-sizes, md), padding);
  font-size: map.get(map.get($button-sizes, md), font-size);
  border-radius: map.get(map.get($button-sizes, md), border-radius);
  line-height: 1.5;
  position: relative;
  box-shadow: $button-shadow;

  // Accessibility
  &:focus-visible {
    outline: 3px solid var(--primary);
    outline-offset: 2px;
  }

  // Disabled state
  &:disabled,
  &.disabled {
    opacity: map.get(c.$color-variations, disabled);
    cursor: not-allowed;
    box-shadow: none;
  }

  // Loading state
  &.loading {
    pointer-events: none;
    position: relative;
    color: transparent !important;

    &::after {
      content: '';
      position: absolute;
      width: 16px;
      height: 16px;
      border: 2px solid var(--text);
      border-top-color: transparent;
      border-radius: 50%;
      animation: spin 0.6s linear infinite;
    }
  }
}

// Keyframes for loading spinner
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}


// --------------------------------------------------------------------------
// Button Variants
// Generates button variants for all colors using button-variant mixin.
// Uses SCSS colors from c.$themes.light for compile-time manipulation.
// --------------------------------------------------------------------------
@each $color, $hex in map.get(c.$themes, light) {
  .btn-#{$color} {
    @include m.button-variant(solid, $color, $hex);
  }

  .btn-outline-#{$color} {
    @include m.button-variant(outline, $color, $hex);
  }

  .btn-ghost-#{$color} {
    @include m.button-variant(ghost, $color, $hex);
  }

  .btn-link-#{$color} {
    @include m.button-variant(link, $color, $hex);
  }

  .btn-soft-#{$color} {
    @include m.button-variant(soft, $color, $hex);
  }

  .btn-gradient-#{$color} {
    @include m.button-variant(gradient, $color, $hex);
  }
}


// --------------------------------------------------------------------------
// Neumorphic Buttons
// Soft, 3D buttons with neumorphic shadows, using SCSS colors for adjustments.
// --------------------------------------------------------------------------
.btn-neumorphic {
  background: var(--light);
  color: var(--text);
  border: 0;
  box-shadow: $button-neumorphic-shadow;
  border-radius: map.get(map.get($button-sizes, md), border-radius);

  &:hover:not(:disabled):not(.disabled) {
    background: color.adjust(map.get(c.$themes, light, light), $lightness: -5%);
    box-shadow: inset 2px 2px 4px rgba(0, 0, 0, 0.1), inset -2px -2px 4px rgba(255, 255, 255, 0.5);
  }

  &:active:not(:disabled):not(.disabled) {
    transform: translateY(1px);
    box-shadow: inset 2px 2px 4px rgba(0, 0, 0, 0.2);
  }
}


// --------------------------------------------------------------------------
// Animated Border Buttons
// Buttons with a sliding border effect, using RGB custom properties.
// --------------------------------------------------------------------------
@each $color in map.keys(map.get(c.$themes, light)) {
  .btn-animated-border-#{$color} {
    position: relative;
    background: none;
    color: var(--#{$color});
    border: $button-outline-width solid transparent;
    overflow: hidden;
    z-index: 1;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(var(--#{$color}-rgb), 0.5), transparent);
      transition: left 0.5s;
      z-index: -1;
    }

    &:hover:not(:disabled):not(.disabled)::before {
      left: 100%;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  }
}


// --------------------------------------------------------------------------
// Button Sizes
// Applies size-specific styles with responsive variants.
// --------------------------------------------------------------------------
@each $size, $props in $button-sizes {
  .btn-#{$size} {
    padding: map.get($props, padding);
    font-size: map.get($props, font-size);
    border-radius: map.get($props, border-radius);
    min-height: map.get($props, min-height);

    @if map.get($props, min-height) < $button-min-touch-target {
      line-height: math.div($button-min-touch-target, map.get($props, font-size));
    }
  }

  @each $bp-size, $value in g.$breakpoints {
    @if $bp-size != 'xs' {
      @include m.media($bp-size, g.$breakpoints) {
        .btn-#{$size}-#{$bp-size} {
          padding: map.get($props, padding);
          font-size: map.get($props, font-size);
          border-radius: map.get($props, border-radius);
          min-height: map.get($props, min-height);

          @if map.get($props, min-height) < $button-min-touch-target {
            line-height: math.div($button-min-touch-target, map.get($props, font-size));
          }
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Button Utilities
// Additional styles for block, rounded, and icon-only buttons.
// --------------------------------------------------------------------------
.btn-block {
  display: flex;
  width: 100%;
  justify-content: center;
}

.btn-rounded {
  border-radius: 9999px;
}

.btn-icon {
  padding: map.get(s.$spacings, 2);
  width: map.get(map.get($button-sizes, md), min-height);
  height: map.get(map.get($button-sizes, md), min-height);
  line-height: 1;
  font-size: 1.25rem;
}


// --------------------------------------------------------------------------
// Button Groups
// Horizontal and vertical button groups using flex utilities.
// --------------------------------------------------------------------------
.btn-group {
  @extend .flex-d;
  gap: map.get(s.$spacings, 1);

  .btn {
    border-radius: 0;
    box-shadow: none;

    &:first-child {
      border-top-left-radius: map.get(map.get($button-sizes, md), border-radius);
      border-bottom-left-radius: map.get(map.get($button-sizes, md), border-radius);
    }

    &:last-child {
      border-top-right-radius: map.get(map.get($button-sizes, md), border-radius);
      border-bottom-right-radius: map.get(map.get($button-sizes, md), border-radius);
    }
  }
}

.btn-group-vertical {
  @extend .flex-d, .flex-column;
  gap: map.get(s.$spacings, 1);

  .btn {
    border-radius: 0;

    &:first-child {
      border-top-left-radius: map.get(map.get($button-sizes, md), border-radius);
      border-top-right-radius: map.get(map.get($button-sizes, md), border-radius);
    }

    &:last-child {
      border-bottom-left-radius: map.get(map.get($button-sizes, md), border-radius);
      border-bottom-right-radius: map.get(map.get($button-sizes, md), border-radius);
    }
  }
}


// --------------------------------------------------------------------------
// Accessibility
// Ensures buttons meet WCAG 2.1 requirements for contrast and touch targets.
// --------------------------------------------------------------------------
$min-button-touch-target: s.$min-touch-target-size;
$button-contrast-ratio: 4.5;