@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use 'colors' as c;
@use 'typography' as t;
@use 'spacing' as s;
@use 'grid' as g;
@use '../mixins/mixins' as m;
@use 'contrast';

// ==========================================================================
// Axel Framework - Buttons
// Description: Comprehensive button styles for the Axel CSS framework.
// Supports multiple variants (solid, outline, ghost, link, soft, gradient,
// neumorphic) for all colors, with sizes, states, groups, and utilities.
// Ensures WCAG 2.1 accessibility and crushes Bootstrap with advanced features.
// Author: Farzad Asgari
// Version: 1.0.0
// ==========================================================================


// --------------------------------------------------------------------------
// Button Variables
// Core configuration for button styles, transitions, and accessibility.
// Example usage: transition: $button-transition;
// --------------------------------------------------------------------------
$button-transition: all 0.2s ease-in-out;
$button-outline-width: 2px;
$button-hover-opacity: 0.9;
$button-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
$button-neumorphic-shadow: 4px 4px 8px rgba(0, 0, 0, 0.1), -4px -4px 8px rgba(255, 255, 255, 0.5);
$button-min-touch-target: s.$min-touch-target-size; // 44px for WCAG 2.1


// --------------------------------------------------------------------------
// Button Sizes
// Defines padding, font-size, and border-radius for button sizes.
// Supports responsive variants via breakpoints.
// Example usage: .btn-sm { padding: map.get(map.get($button-sizes, sm), padding); }
// --------------------------------------------------------------------------
$button-sizes: (
  xs: (
    padding: map.get(s.$spacings, 1) map.get(s.$spacings, 2), // 4px 8px
    font-size: map.get(t.$font-sizes, xs), // 12px
    border-radius: 0.25rem,
    min-height: $button-min-touch-target // 44px
  ),
  sm: (
    padding: map.get(s.$spacings, 2) map.get(s.$spacings, 3), // 8px 16px
    font-size: map.get(t.$font-sizes, sm), // 14px
    border-radius: 0.375rem,
    min-height: $button-min-touch-target
  ),
  md: (
    padding: map.get(s.$spacings, 3) map.get(s.$spacings, 4), // 16px 24px
    font-size: map.get(t.$font-sizes, base), // 16px
    border-radius: 0.5rem,
    min-height: $button-min-touch-target
  ),
  lg: (
    padding: map.get(s.$spacings, 4) map.get(s.$spacings, 5), // 24px 32px
    font-size: map.get(t.$font-sizes, lg), // 18px
    border-radius: 0.625rem,
    min-height: 48px
  ),
  xl: (
    padding: map.get(s.$spacings, 5) map.get(s.$spacings, 6), // 32px 40px
    font-size: map.get(t.$font-sizes, xl), // 20px
    border-radius: 0.75rem,
    min-height: 52px
  )
);


// --------------------------------------------------------------------------
// Base Button Styles
// Core styles applied to all buttons, ensuring consistency and accessibility.
// Example usage: .btn { display: inline-flex; }
// --------------------------------------------------------------------------
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-family: map.get(t.$font-families, primary);
  font-weight: 500;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  border: 0;
  outline: none;
  transition: $button-transition;
  box-sizing: border-box;
  min-height: map.get(map.get($button-sizes, md), min-height);
  padding: map.get(map.get($button-sizes, md), padding);
  font-size: map.get(map.get($button-sizes, md), font-size);
  border-radius: map.get(map.get($button-sizes, md), border-radius);
  line-height: 1.5;
  position: relative; // For loading spinner
  box-shadow: $button-shadow;

  // Accessibility
  &:focus {
    outline: 3px solid rgba(map.get(c.$colors, primary), 0.5);
    outline-offset: 2px;
  }

  // Disabled state
  &:disabled,
  &.disabled {
    opacity: 0.6;
    cursor: not-allowed;
    box-shadow: none;
  }

  // Loading state
  &.loading {
    pointer-events: none;
    position: relative;
    color: transparent !important;

    &::after {
      content: '';
      position: absolute;
      width: 16px;
      height: 16px;
      border: 2px solid currentColor;
      border-top-color: transparent;
      border-radius: 50%;
      animation: spin 0.6s linear infinite;
    }
  }
}


// Keyframes for loading spinner
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}


// --------------------------------------------------------------------------
// Button Variants
// Generates solid, outline, ghost, link, and soft buttons for all colors.
// Example usage: .btn-primary { background: map.get(c.$colors, primary); }
// --------------------------------------------------------------------------
@each $color, $hex in c.$colors {
  // Solid buttons
  .btn-#{$color} {
    background-color: $hex;
    color: contrast.accessible-text-color($hex);
    border: $button-outline-width solid $hex;

    &:hover:not(:disabled):not(.disabled) {
      background-color: color.adjust($hex, $lightness: -10%);
      color: contrast.accessible-text-color(color.adjust($hex, $lightness: -10%));
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }

  // Outline buttons
  .btn-outline-#{$color} {
    background-color: transparent;
    color: $hex;
    border: $button-outline-width solid $hex;

    &:hover:not(:disabled):not(.disabled) {
      background-color: $hex;
      color: contrast.accessible-text-color($hex);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  }

  // Ghost buttons
  .btn-ghost-#{$color} {
    background-color: transparent;
    color: $hex;
    border: $button-outline-width solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: rgba($hex, 0.1);
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }

  // Link buttons
  .btn-link-#{$color} {
    background-color: transparent;
    color: $hex;
    border: $button-outline-width solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: transparent;
      color: color.adjust($hex, $lightness: -20%);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  }

  // Soft buttons
  .btn-soft-#{$color} {
    background-color: rgba($hex, 0.15);
    color: $hex;
    border: $button-outline-width solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: rgba($hex, 0.3);
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }

  // Gradient buttons
  .btn-gradient-#{$color} {
    background: linear-gradient(45deg, $hex, color.adjust($hex, $lightness: 20%));
    color: contrast.accessible-text-color($hex);
    border: 0;

    &:hover:not(:disabled):not(.disabled) {
      background: linear-gradient(45deg, color.adjust($hex, $lightness: -10%), $hex);
      color: contrast.accessible-text-color(color.adjust($hex, $lightness: -10%));
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }
}


// --------------------------------------------------------------------------
// Neumorphic Buttons
// Soft, 3D buttons with neumorphic shadows (single style, no color variants).
// Example usage: .btn-neumorphic { box-shadow: $button-neumorphic-shadow; }
// --------------------------------------------------------------------------
.btn-neumorphic {
  background: #e0e0e0;
  color: contrast.accessible-text-color(#e0e0e0);
  border: 0;
  box-shadow: $button-neumorphic-shadow;
  border-radius: map.get(map.get($button-sizes, md), border-radius);

  &:hover:not(:disabled):not(.disabled) {
    background: #d5d5d5;
    box-shadow: inset 2px 2px 4px rgba(0, 0, 0, 0.1), inset -2px -2px 4px rgba(255, 255, 255, 0.5);
  }

  &:active:not(:disabled):not(.disabled) {
    transform: translateY(1px);
    box-shadow: inset 2px 2px 4px rgba(0, 0, 0, 0.2);
  }
}


// --------------------------------------------------------------------------
// Animated Border Buttons
// Buttons with a sliding border effect for extra flair.
// Example usage: .btn-animated-border-primary { background: none; }
// --------------------------------------------------------------------------
@each $color, $hex in c.$colors {
  .btn-animated-border-#{$color} {
    position: relative;
    background: none;
    color: $hex;
    border: $button-outline-width solid transparent;
    overflow: hidden;
    z-index: 1;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba($hex, 0.5), transparent);
      transition: left 0.5s;
      z-index: -1;
    }

    &:hover:not(:disabled):not(.disabled)::before {
      left: 100%;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  }
}

// --------------------------------------------------------------------------
// Button Sizes
// Applies size-specific styles, with responsive variants.
// Example usage: .btn-sm { font-size: map.get(map.get($button-sizes, sm), font-size); }
// --------------------------------------------------------------------------
@each $size, $props in $button-sizes {
  .btn-#{$size} {
    padding: map.get($props, padding);
    font-size: map.get($props, font-size);
    border-radius: map.get($props, border-radius);
    min-height: map.get($props, min-height);

    // Ensure touch target size
    @if map.get($props, min-height) < $button-min-touch-target {
      line-height: math.div($button-min-touch-target, map.get($props, font-size));
    }
  }

  @each $bp-size, $value in g.$breakpoints {
    @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      .btn-#{$size}-#{$bp-size} {
        padding: map.get($props, padding);
        font-size: map.get($props, font-size);
        border-radius: map.get($props, border-radius);
        min-height: map.get($props, min-height);

        @if map.get($props, min-height) < $button-min-touch-target {
          line-height: math.div($button-min-touch-target, map.get($props, font-size));
        }
      }
    }
    }
  }
}