@use 'sass:map';
@use 'sass:math';
@use 'spacing' as s;

// ==========================================================================
// Axel Framework - Grid
// Description: A responsive, flexible grid system for the Axel CSS framework.
// Supports 12-column layouts, fluid/fixed containers, offsets, and responsive
// breakpoints. Integrates with spacing tokens for consistency and WCAG 2.1
// accessibility. Designed to surpass Bootstrap with advanced features and DX.
// Author: Farzad Asgari
// Version: 1.0.0
// ==========================================================================


// --------------------------------------------------------------------------
// Breakpoints
// Responsive breakpoints for grid and layout adjustments.
// Uses pixel values for clarity, applied via media mixins.
// Example usage: @include media(md) { width: 50%; }
// --------------------------------------------------------------------------
$breakpoints: (
        xs: 0, // Extra-small (mobile, <576px)
        sm: 576px, // Small (mobile, ≥576px)
        md: 768px, // Medium (tablet, ≥768px)
        lg: 992px, // Large (desktop, ≥992px)
        xl: 1200px, // Extra-large (wide desktop, ≥1200px)
        xxl: 1400px // Extra-extra-large (ultra-wide, ≥1400px)
);


// --------------------------------------------------------------------------
// Container Widths
// Maximum widths for fixed containers at each breakpoint.
// Fluid containers use 100% width with padding from $container-paddings.
// Example usage: max-width: map.get($container-widths, lg);
// --------------------------------------------------------------------------
$container-widths: (
        sm: 540px, // Small screens
        md: 720px, // Medium screens
        lg: 960px, // Large screens
        xl: 1140px, // Extra-large screens
        xxl: 1320px // Extra-extra-large screens
);


// --------------------------------------------------------------------------
// Grid Columns
// Number of columns for different grid configurations.
// Supports standard (12), compact (6), and micro (4) grids.
// Example usage: width: percentage($span / map.get($grid-columns, default));
// --------------------------------------------------------------------------
$grid-columns: (
        default: 12, // Standard 12-column grid
        compact: 6, // For simpler layouts
        micro: 4 // For minimal layouts
);


// --------------------------------------------------------------------------
// Grid Gutters
// Reuses $grid-gutters from _spacing.scss for row/column gaps.
// Supports responsive gutter adjustments.
// Example usage: gap: map.get(s.$grid-gutters, default);
// --------------------------------------------------------------------------
$grid-gutter-widths: s.$grid-gutters;


// --------------------------------------------------------------------------
// Container Configuration
// Defines properties for fluid and fixed containers.
// Uses padding from _spacing.scss for consistency.
// Example usage: @include container(fixed, lg);
// --------------------------------------------------------------------------
$container-config: (
        fluid: (
                padding: map.get(s.$container-paddings, md), // 24px default
                width: 100%, // Full-width
                margin: auto // Center horizontally
        ),
        fixed: (
                padding: map.get(s.$container-paddings, md), // 24px default
                max-width: none, // Set per breakpoint
                margin: auto
        )
);