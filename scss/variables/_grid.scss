@use 'sass:map';
@use 'sass:math';
@use 'spacing' as s;

// ==========================================================================
// Axel Framework - Grid
// Description: A responsive, flexible grid system for the Axel CSS framework.
// Supports 12-column layouts, fluid/fixed containers, offsets, and responsive
// breakpoints. Integrates with spacing tokens for consistency and WCAG 2.1
// accessibility. Designed to surpass Bootstrap with advanced features and DX.
// Author: Farzad Asgari
// Version: 1.0.0
// ==========================================================================


// --------------------------------------------------------------------------
// Breakpoints
// Responsive breakpoints for grid and layout adjustments.
// Uses pixel values for clarity, applied via media mixins.
// Example usage: @include media(md) { width: 50%; }
// --------------------------------------------------------------------------
$breakpoints: (
  xs: 0, // Extra-small (mobile, <576px)
  sm: 576px, // Small (mobile, ≥576px)
  md: 768px, // Medium (tablet, ≥768px)
  lg: 992px, // Large (desktop, ≥992px)
  xl: 1200px, // Extra-large (wide desktop, ≥1200px)
  xxl: 1400px // Extra-extra-large (ultra-wide, ≥1400px)
);


// --------------------------------------------------------------------------
// Container Widths
// Maximum widths for fixed containers at each breakpoint.
// Fluid containers use 100% width with padding from $container-paddings.
// Example usage: max-width: map.get($container-widths, lg);
// --------------------------------------------------------------------------
$container-widths: (
  sm: 540px, // Small screens
  md: 720px, // Medium screens
  lg: 960px, // Large screens
  xl: 1140px, // Extra-large screens
  xxl: 1320px // Extra-extra-large screens
);


// --------------------------------------------------------------------------
// Grid Columns
// Number of columns for different grid configurations.
// Supports standard (12), compact (6), and micro (4) grids.
// Example usage: width: percentage($span / map.get($grid-columns, default));
// --------------------------------------------------------------------------
$grid-columns: (
  default: 12, // Standard 12-column grid
  compact: 6, // For simpler layouts
  micro: 4 // For minimal layouts
);


// --------------------------------------------------------------------------
// Grid Gutters
// Reuses $grid-gutters from _spacing.scss for row/column gaps.
// Supports responsive gutter adjustments.
// Example usage: gap: map.get(s.$grid-gutters, default);
// --------------------------------------------------------------------------
$grid-gutter-widths: s.$grid-gutters;


// --------------------------------------------------------------------------
// Container Configuration
// Defines properties for fluid and fixed containers.
// Uses padding from _spacing.scss for consistency.
// Example usage: @include container(fixed, lg);
// --------------------------------------------------------------------------
$container-config: (
  fluid: (
    padding: map.get(s.$container-paddings, md), // 24px default
    width: 100%, // Full-width
    margin: auto // Center horizontally
  ),
  fixed: (
    padding: map.get(s.$container-paddings, md), // 24px default
    max-width: none, // Set per breakpoint
    margin: auto
  )
);


// --------------------------------------------------------------------------
// CSS Custom Properties
// Grid-related custom properties for runtime customization.
// Applied to :root for global access.
// Example usage: gap: var(--grid-gutter-default);
// --------------------------------------------------------------------------
:root {
  --grid-columns: #{map.get($grid-columns, default)}; // 12
  --grid-gutter-default: #{map.get(s.$grid-gutters, default)}; // 16px
  --container-padding-default: #{map.get(s.$container-paddings, md)}; // 24px
}


// --------------------------------------------------------------------------
// Media Mixins
// Utility mixins for applying styles at specific breakpoints.
// Supports min-width and max-width queries.
// Example usage: @include media(md) { width: 50%; }
// --------------------------------------------------------------------------
@mixin media($breakpoint) {
  $value: map.get($breakpoints, $breakpoint);
  @media (min-width: $value) {
    @content;
  }
}

@mixin media-down($breakpoint) {
  $value: map.get($breakpoints, $breakpoint);
  @media (max-width: $value - 1px) {
    @content;
  }
}


// --------------------------------------------------------------------------
// Container Styles
// Base styles for fluid and fixed containers, with responsive max-widths.
// Builds on .cntnr and .cntnrfl from original code.
// Example usage: .container { @include container(fixed, lg); }
// --------------------------------------------------------------------------
.container {
  padding-left: map.get(map.get($container-config, fixed), padding);
  padding-right: map.get(map.get($container-config, fixed), padding);
  margin: map.get(map.get($container-config, fixed), margin);
  box-sizing: border-box;

  @each $size, $value in $container-widths {
    @include media($size) {
      max-width: $value;
    }
  }
}

.container-fluid {
  width: map.get(map.get($container-config, fluid), width);
  padding-left: map.get(map.get($container-config, fluid), padding);
  padding-right: map.get(map.get($container-config, fluid), padding);
  margin: map.get(map.get($container-config, fluid), margin);
  box-sizing: border-box;
}