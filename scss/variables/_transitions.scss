@use 'sass:map';
@use '../mixins/mixins' as m;
@use 'grid' as g;

// ==========================================================================
// Axel Framework - Transitions
// Description: Utility classes for transition properties in the Axel CSS framework.
// Supports transition-property, duration, and timing-function with responsive variants.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Transition Configuration
// Defines transition properties for utility classes.
// Example usage: .transition-all { transition: all 0.3s ease; }
// --------------------------------------------------------------------------
$transition-properties: (
  "all": all,
  "colors": (color, background-color, border-color),
  "opacity": opacity,
  "transform": transform
);

$transition-durations: (
  "100": 100ms,
  "200": 200ms,
  "300": 300ms,
  "500": 500ms,
  "700": 700ms
);

$transition-easings: (
  "ease": ease,
  "ease-in": ease-in,
  "ease-out": ease-out,
  "ease-in-out": ease-in-out
);


// --------------------------------------------------------------------------
// Transition Utilities
// Generates transition utility classes with responsive variants.
// --------------------------------------------------------------------------

// Transition Property
@include m.generate-utility("transition-property", "transition", $transition-properties);
@each $bp-size, $bp-value in g.$breakpoints {
  @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      @each $key, $value in $transition-properties {
        .#{$bp-size}\:transition-#{$key} {
          transition-property: $value;
        }
      }
    }
  }
}

// Transition Duration
@include m.generate-utility("transition-duration", "duration", $transition-durations);
@each $bp-size, $bp-value in g.$breakpoints {
  @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      @each $key, $value in $transition-durations {
        .#{$bp-size}\:duration-#{$key} {
          transition-duration: $value;
        }
      }
    }
  }
}

// Transition Timing Function
@include m.generate-utility("transition-timing-function", "ease", $transition-easings);
@each $bp-size, $bp-value in g.$breakpoints {
  @if $bp-size != 'xs' {
    @include m.media($bp-size, g.$breakpoints) {
      @each $key, $value in $transition-easings {
        .#{$bp-size}\:ease-#{$key} {
          transition-timing-function: $value;
        }
      }
    }
  }
}