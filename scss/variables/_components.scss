@use 'sass:map';
@use 'colors' as c;
@use 'typography' as t;
@use 'spacing' as s;
@use 'borders' as b;
@use 'animations';
@use 'grid' as g;
@use '../mixins/mixins' as m;

// ==========================================================================
// Axel Framework - Components
// Description: Simple component styles for badges, spinners, breadcrumbs, pagination,
// progress bars, placeholders, alerts, and list groups.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Badges
// Styles for small labels or tags.
// --------------------------------------------------------------------------
.badge {
  display: inline-block;
  padding: map.get(s.$spacings, 1) map.get(s.$spacings, 2);
  font-size: map.get(t.$font-sizes, xs);
  font-weight: map.get(t.$font-weights, medium);
  line-height: 1.5;
  border-radius: map.get(b.$border-radii, "4px");
  color: var(--background);
  background-color: var(--primary);
  @include m.accessible-component;

  &.animate {
    animation: scale-in 0.3s ease-out;
    animation-fill-mode: both;

    @media (prefers-reduced-motion: reduce) {
      animation: none !important;
    }
  }
}

@each $color, $hex in map.get(c.$themes, light) {
  .badge-#{$color} {
    background-color: var(--#{$color});
    color: map.get(c.$themes, light, text);
  }
}


// --------------------------------------------------------------------------
// Spinners
// Styles for loading indicators.
// --------------------------------------------------------------------------
.spinner {
  display: inline-block;
  width: 24px;
  height: 24px;
  border: map.get(b.$border-widths, "2px") solid var(--primary);
  border-top-color: transparent;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  animation-fill-mode: both;
  @include m.accessible-component;

  @media (prefers-reduced-motion: reduce) {
    animation: none !important;
  }
}

@each $color, $hex in map.get(c.$themes, light) {
  .spinner-#{$color} {
    border-color: var(--#{$color});
    border-top-color: transparent;
  }
}


// --------------------------------------------------------------------------
// Breadcrumbs
// Styles for navigation trails.
// --------------------------------------------------------------------------
.breadcrumb {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  padding: map.get(s.$spacings, 2);
  margin: 0;
  font-size: map.get(t.$font-sizes, sm);
}

.breadcrumb-item {
  & + .breadcrumb-item::before {
    content: "/";
    padding: 0 map.get(s.$spacings, 1);
    color: var(--text-muted);
  }

  a {
    color: var(--primary);
    text-decoration: none;
    @include m.accessible-component;

    &:hover {
      color: var(--primary-dark);
      animation: scale-in 0.3s ease-out;
      animation-fill-mode: both;

      @media (prefers-reduced-motion: reduce) {
        animation: none !important;
      }
    }
  }
}


// --------------------------------------------------------------------------
// Pagination
// Styles for page navigation.
// --------------------------------------------------------------------------
.pagination {
  display: flex;
  list-style: none;
  padding: 0;
  margin: 0;
}

.page-item {
  margin: 0 map.get(s.$spacings, 1);
}

.page-link {
  display: block;
  padding: map.get(s.$spacings, 1) map.get(s.$spacings, 2);
  border: map.get(b.$border-widths, "1px") solid var(--border);
  border-radius: map.get(b.$border-radii, "4px");
  color: var(--primary);
  text-decoration: none;
  @include m.accessible-component;

  &:hover {
    background-color: rgba(var(--primary-rgb), 0.1);
    animation: fade-in 0.5s ease-out;
    animation-fill-mode: both;

    @media (prefers-reduced-motion: reduce) {
      animation: none !important;
    }
  }

  &.active {
    background-color: var(--primary);
    color: var(--background);
    border-color: var(--primary);
  }

  &.disabled {
    color: var(--text-muted);
    pointer-events: none;
  }
}


// --------------------------------------------------------------------------
// Progress Bars
// Styles for progress indicators.
// --------------------------------------------------------------------------
.progress {
  display: flex;
  height: 16px;
  overflow: hidden;
  background-color: var(--background-muted);
  border-radius: map.get(b.$border-radii, "4px");
}

.progress-bar {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--primary);
  color: var(--background);
  transition: width 0.6s ease;
  animation: slide-down 0.5s ease-out;
  animation-fill-mode: both;

  @media (prefers-reduced-motion: reduce) {
    animation: none !important;
  }

  @each $color, $hex in map.get(c.$themes, light) {
    &.progress-#{$color} {
      background-color: var(--#{$color});
    }
  }
}


// --------------------------------------------------------------------------
// Placeholders
// Styles for loading placeholders with shimmer effect.
// --------------------------------------------------------------------------
.placeholder {
  display: inline-block;
  background: linear-gradient(
      90deg,
      var(--background-muted) 25%,
      rgba(var(--background-rgb), 0.2) 50%,
      var(--background-muted) 75%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
  border-radius: map.get(b.$border-radii, "4px");
}

.placeholder-text {
  @extend .placeholder;
  height: map.get(t.$font-sizes, base);
  width: 100%;
}

.placeholder-img {
  @extend .placeholder;
  height: 100px;
  width: 100%;
}


// --------------------------------------------------------------------------
// Alerts
// Styles for notification messages.
// --------------------------------------------------------------------------
.alert {
  padding: map.get(s.$spacings, 3);
  border: map.get(b.$border-widths, "1px") solid var(--border);
  border-radius: map.get(b.$border-radii, "4px");
  font-size: map.get(t.$font-sizes, base);
  color: var(--text);
  background-color: var(--background);
  @include m.accessible-component;

  &.animate {
    animation: fade-in 0.5s ease-out;
    animation-fill-mode: both;

    @media (prefers-reduced-motion: reduce) {
      animation: none !important;
    }
  }
}

@each $color, $hex in map.get(c.$themes, light) {
  .alert-#{$color} {
    background-color: rgba(var(--#{$color}-rgb), 0.1);
    border-color: var(--#{$color});
    color: var(--#{$color});
  }
}