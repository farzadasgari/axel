@use 'sass:map';
@use '../variables/colors' as c;
@use '../variables/spacing' as s;
@use '../variables/typography' as t;
@use '../variables/contrast';

// ==========================================================================
// Axel Framework - Mixins
// Description: Centralized mixins for the Axel CSS framework, providing reusable
// utilities for grid, flex, buttons, theming, and more. Integrates with spacing,
// typography, and colors for consistency and WCAG 2.1 accessibility.
// Author: Farzad Asgari
// Version: 1.1.0
// ==========================================================================

// --------------------------------------------------------------------------
// Media Mixins
// Utility mixins for applying styles at specific breakpoints.
// Supports min-width and max-width queries.
// Example usage: @include media(md, $breakpoints) { width: 50%; }
// --------------------------------------------------------------------------
@mixin media($breakpoint, $breakpoints) {
  $value: map.get($breakpoints, $breakpoint);
  @media (min-width: $value) {
    @content;
  }
}

@mixin media-down($breakpoint, $breakpoints) {
  $value: map.get($breakpoints, $breakpoint);
  @media (max-width: $value - 1px) {
    @content;
  }
}

// --------------------------------------------------------------------------
// Alignment Mixins
// Mixins for Flexbox and Grid alignment properties.
// Used by grid and flex systems to ensure consistency.
// Example usage: @include justify-content(center);
// --------------------------------------------------------------------------
@mixin justify-content($value) {
  justify-content: $value;
}

@mixin align-items($value) {
  align-items: $value;
}

@mixin align-content($value) {
  align-content: $value;
}

@mixin align-self($value) {
  align-self: $value;
}


// --------------------------------------------------------------------------
// Theming Mixin
// Applies theme-specific CSS custom properties based on $theme.
// Example usage: @include theme(light, $themes);
// --------------------------------------------------------------------------
@mixin theme($theme, $themes) {
  @each $key, $value in map.get($themes, $theme) {
    --#{$key}: #{$value};
  }
}