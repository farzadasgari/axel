@use 'sass:map';
@use 'sass:color';
@use '../variables/colors' as c;
@use '../variables/spacing' as s;
@use '../variables/typography' as t;
@use '../variables/contrast';

// ==========================================================================
// Axel Framework - Mixins
// Description: Centralized mixins for the Axel CSS framework, providing reusable
// utilities for grid, flex, buttons, theming, and more. Integrates with spacing,
// typography, and colors for consistency and WCAG 2.1 accessibility.
// Author: Farzad Asgari
// Version: 1.1.0
// ==========================================================================

// --------------------------------------------------------------------------
// Media Mixins
// Utility mixins for applying styles at specific breakpoints.
// Supports min-width and max-width queries.
// Example usage: @include media(md, $breakpoints) { width: 50%; }
// --------------------------------------------------------------------------
@mixin media($breakpoint, $breakpoints) {
  $value: map.get($breakpoints, $breakpoint);
  @media (min-width: $value) {
    @content;
  }
}

@mixin media-down($breakpoint, $breakpoints) {
  $value: map.get($breakpoints, $breakpoint);
  @media (max-width: $value - 1px) {
    @content;
  }
}

// --------------------------------------------------------------------------
// Alignment Mixins
// Mixins for Flexbox and Grid alignment properties.
// Used by grid and flex systems to ensure consistency.
// Example usage: @include justify-content(center);
// --------------------------------------------------------------------------
@mixin justify-content($value) {
  justify-content: $value;
}

@mixin align-items($value) {
  align-items: $value;
}

@mixin align-content($value) {
  align-content: $value;
}

@mixin align-self($value) {
  align-self: $value;
}


// --------------------------------------------------------------------------
// Theming Mixin
// Applies theme-specific CSS custom properties based on $theme.
// Example usage: @include theme(light, $themes);
// --------------------------------------------------------------------------
@mixin theme($theme, $themes) {
  @each $key, $value in map.get($themes, $theme) {
    --#{$key}: #{$value};
  }
}


// --------------------------------------------------------------------------
// Button Variant Mixin
// Generates styles for button variants (solid, outline, etc.).
// Example usage: @include button-variant(solid, $color, $hex);
// --------------------------------------------------------------------------
@mixin button-variant($variant, $color, $hex) {
  @if $variant == 'solid' {
    background-color: $hex;
    color: contrast.accessible-text-color($hex);
    border: 2px solid $hex;

    &:hover:not(:disabled):not(.disabled) {
      background-color: color.adjust($hex, $lightness: -10%);
      color: contrast.accessible-text-color(color.adjust($hex, $lightness: -10%));
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  } @else if $variant == 'outline' {
    background-color: transparent;
    color: $hex;
    border: 2px solid $hex;

    &:hover:not(:disabled):not(.disabled) {
      background-color: $hex;
      color: contrast.accessible-text-color($hex);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  } @else if $variant == 'ghost' {
    background-color: transparent;
    color: $hex;
    border: 2px solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: rgba($hex, 0.1);
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  } @else if $variant == 'link' {
    background-color: transparent;
    color: $hex;
    border: 2px solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: transparent;
      color: color.adjust($hex, $lightness: -20%);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  } @else if $variant == 'soft' {
    background-color: rgba($hex, 0.15);
    color: $hex;
    border: 2px solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: rgba($hex, 0.3);
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  } @else if $variant == 'gradient' {
    background: linear-gradient(45deg, $hex, color.adjust($hex, $lightness: 20%));
    color: contrast.accessible-text-color($hex);
    border: 0;

    &:hover:not(:disabled):not(.disabled) {
      background: linear-gradient(45deg, color.adjust($hex, $lightness: -10%), $hex);
      color: contrast.accessible-text-color(color.adjust($hex, $lightness: -10%));
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }
}