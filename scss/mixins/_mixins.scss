@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use '../variables/spacing' as s;
@use '../variables/typography' as t;
@use '../variables/contrast';

// ==========================================================================
// Axel Framework - Mixins
// Description: Centralized mixins for the Axel CSS framework, providing reusable
// utilities for grid, flex, buttons, theming, and more. Integrates with spacing
// and typography for consistency and WCAG 2.1 accessibility.
// Author: Farzad Asgari <https://github.com/farzadasgari>
// Version: 1.1.1
// ==========================================================================


// --------------------------------------------------------------------------
// Media Mixins
// Utility mixins for applying styles at specific breakpoints.
// Supports min-width and max-width queries.
// Example usage: @include media(md, $breakpoints) { width: 50%; }
// --------------------------------------------------------------------------
@mixin media($breakpoint, $breakpoints) {
  $value: map.get($breakpoints, $breakpoint);
  @media (min-width: $value) {
    @content;
  }
}

@mixin media-down($breakpoint, $breakpoints) {
  $value: map.get($breakpoints, $breakpoint);
  @media (max-width: $value - 1px) {
    @content;
  }
}


// --------------------------------------------------------------------------
// Alignment Mixins
// Mixins for Flexbox and Grid alignment properties.
// Used by grid and flex systems to ensure consistency.
// Example usage: @include justify-content(center);
// --------------------------------------------------------------------------
@mixin justify-content($value) {
  justify-content: $value;
}

@mixin align-items($value) {
  align-items: $value;
}

@mixin align-content($value) {
  align-content: $value;
}

@mixin align-self($value) {
  align-self: $value;
}


// --------------------------------------------------------------------------
// Theming Mixin
// Applies theme-specific CSS custom properties based on $theme.
// Example usage: @include theme(light, $themes);
// --------------------------------------------------------------------------
@mixin theme($theme, $themes) {
  @each $key, $value in map.get($themes, $theme) {
    --#{$key}: #{$value};
  }
}


// --------------------------------------------------------------------------
// Button Variant Mixin
// Generates styles for button variants (solid, outline, etc.).
// Uses var(--text) for text color to avoid contrast issues with custom properties.
// Example usage: @include button-variant(solid, $color, var(--primary));
// --------------------------------------------------------------------------
@mixin button-variant($variant, $color, $hex) {
  @if $variant == 'solid' {
    background-color: $hex;
    color: var(--text);
    border: 2px solid $hex;

    &:hover:not(:disabled):not(.disabled) {
      filter: brightness(90%); // Darken by 10%
      color: var(--text);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  } @else if $variant == 'outline' {
    background-color: transparent;
    color: $hex;
    border: 2px solid $hex;

    &:hover:not(:disabled):not(.disabled) {
      background-color: $hex;
      color: var(--text);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  } @else if $variant == 'ghost' {
    background-color: transparent;
    color: $hex;
    border: 2px solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: rgba(var(--#{$color}-rgb), 0.1);
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  } @else if $variant == 'link' {
    background-color: transparent;
    color: $hex;
    border: 2px solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      filter: brightness(80%); // Darken by 20%
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
    }
  } @else if $variant == 'soft' {
    background-color: rgba(var(--#{$color}-rgb), 0.15);
    color: $hex;
    border: 2px solid transparent;

    &:hover:not(:disabled):not(.disabled) {
      background-color: rgba(var(--#{$color}-rgb), 0.3);
      color: $hex;
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  } @else if $variant == 'gradient' {
    background: linear-gradient(45deg, $hex, rgba(var(--#{$color}-rgb), 0.8));
    color: var(--text);
    border: 0;

    &:hover:not(:disabled):not(.disabled) {
      filter: brightness(90%);
      color: var(--text);
    }

    &:active:not(:disabled):not(.disabled) {
      transform: translateY(1px);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  }
}


// --------------------------------------------------------------------------
// Utility Generator Mixin
// Generates utility classes for a given property and values.
// Example usage: @include generate-utility('width', $width-values);
// --------------------------------------------------------------------------
@mixin generate-utility($prop, $prefix, $values, $theme: false) {
  @each $key, $value in $values {
    .#{$prefix}-#{$key} {
      @if $theme {
        #{$prop}: var(--#{$key});
      } @else {
        #{$prop}: $value;
      }
    }
  }
}


// --------------------------------------------------------------------------
// Responsive Utility Generator Mixin
// Generates responsive utility classes for a given property and breakpoints.
// Example usage: @include generate-responsive-utility('width', $width-values, $breakpoints);
// --------------------------------------------------------------------------
@mixin generate-responsive-utility($prop, $prefix, $values, $breakpoints, $theme: false) {
  @each $bp-size, $bp-value in $breakpoints {
    @if $bp-size != 'xs' {
      @include media($bp-size, $breakpoints) {
        @each $key, $value in $values {
          .#{$bp-size}\:#{$prefix}-#{$key} {
            @if $theme {
              #{$prop}: var(--#{$key});
            } @else {
              #{$prop}: $value;
            }
          }
        }
      }
    }
  }
}


// --------------------------------------------------------------------------
// Touch Target Mixin
// Ensures interactive elements meet WCAG 2.1 44x44px touch target size.
// Example usage: @include touch-target;
// --------------------------------------------------------------------------
@mixin touch-target {
  min-width: s.$min-touch-target-size;
  min-height: s.$min-touch-target-size;
  padding: map.get(s.$spacings, 2);

  // Ensure content is centered
  display: flex;
  align-items: center;
  justify-content: center;
}